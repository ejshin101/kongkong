package com.kongkong.main;

import java.io.IOException;
import java.util.List;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.kongkong.exception.BizNotFoundException;
import com.kongkong.exception.BizPasswordNotMatchedException;
import com.kongkong.login.service.IloginService;
import com.kongkong.login.vo.UserVO;
import com.kongkong.member.service.IMemberService;
import com.kongkong.member.vo.MemberVO;
import com.kongkong.util.CookieUtils;

/**
 * Handles requests for the application home page.
 */
@Controller
public class EventPageController {
	@Autowired
	IMemberService memberService;
	@Autowired
	private IloginService loginService;
	
	@RequestMapping("/event/eventHome")
	public String eventHome(Model model, HttpSession session,@ModelAttribute("user") UserVO user) throws Exception {
		UserVO vo = (UserVO)session.getAttribute("USER_INFO");
		if(vo == null) {
			return "login/login";
		}
		MemberVO member = memberService.getMember(vo.getUserId());
		model.addAttribute("member", member);
		return "event/eventHome";
	}
	@PostMapping("/event/login.wow")
	public String eventLogin(@ModelAttribute("user") UserVO vo
			 , BindingResult error
			 , @RequestParam(name = "idRemember", required = false) String remember 
			 , HttpSession session
			 , HttpServletResponse resp ) {
		try {
			UserVO user = loginService.loginCheck(vo);
			session.setAttribute("USER_INFO", user); 
			
			try {
				//쿠키의  "아아디 기억하기" 가 Y 유무에따라
				Cookie rememberCookie = null;		
				if("Y".equals(remember)) {
				// 하루 보관
				rememberCookie = CookieUtils.createCookie("ID_REMEMBER", user.getUserId(),"/", 60*60*24);
				}else {
				//삭제 (maxage = 0)
				rememberCookie = CookieUtils.createCookie("ID_REMEMBER", "","/", 0);
				}
				resp.addCookie(rememberCookie);
				} catch (IOException e) {
			}
			return "event/eventHome";
		} catch (BizNotFoundException e) {
			error.reject("notfound","조회실패" + e.getMessage());
			return "login/login";
		} catch (BizPasswordNotMatchedException e) {
			error.reject("notfound","패스워드가 일치하지 않습니다.");
			return "login/login";
		}
	}
	@RequestMapping("/event/mileage")
	public String eventMileage(HttpSession session,Model model) {
		UserVO user = (UserVO)session.getAttribute("USER_INFO");
		MemberVO member = memberService.getMember(user.getUserId());
		memberService.changeMileage(member);
		
		return "";
	}
	@RequestMapping("/event/ladder")
	public String ladder() {
		return "event/ladder";
	}
	@RequestMapping("/event/ladder2")
	public String ladder2() {
		return "event/ladder2";
	}
	@RequestMapping("/event/roulette")
	public String roulette(Model model,HttpSession session) {
		UserVO user = (UserVO)session.getAttribute("USER_INFO");
		MemberVO member = memberService.getMember(user.getUserId());
		model.addAttribute("member", member);
		return "event/roulette";
	}
	@RequestMapping("/event/roulette2")
	public String roulette2() {
		return "event/roulette2";
	}
}
