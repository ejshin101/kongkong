package com.kongkong.main;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.support.SecurityContextProvider;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kongkong.exception.BizNotFoundException;
import com.kongkong.exception.BizPasswordNotMatchedException;
import com.kongkong.flight.service.IFlightService;
import com.kongkong.flight.vo.FlightVO;
import com.kongkong.login.service.IloginService;
import com.kongkong.login.vo.UserVO;
import com.kongkong.member.service.IMemberService;
import com.kongkong.member.vo.MemberVO;
import com.kongkong.util.CookieUtils;

/**
 * Handles requests for the application home page.
 */
@Controller
public class EventPageController {
	@Autowired
	IMemberService memberService;
	@Autowired
	private IloginService loginService;
	@Autowired
	private IFlightService flightService;
	
	@RequestMapping("/event/eventHome")
	public String eventHome(Model model, HttpSession session,@ModelAttribute("user") UserVO user) throws Exception {
		UserVO vo = (UserVO)session.getAttribute("USER_INFO");
		if(vo == null) {
			return "login/login";
		}
		MemberVO member = memberService.getMember(vo.getUserId());
		model.addAttribute("member", member);
		return "event/eventHome";
	}
	@PostMapping("/event/login.wow")
	public String eventLogin(@ModelAttribute("user") UserVO vo
			 , BindingResult error
			 , @RequestParam(name = "idRemember", required = false) String remember 
			 , HttpSession session
			 , HttpServletResponse resp ) {
		try {
			UserVO user = loginService.loginCheck(vo);
			session.setAttribute("USER_INFO", user); 
			
			try {
				//쿠키의  "아아디 기억하기" 가 Y 유무에따라
				Cookie rememberCookie = null;		
				if("Y".equals(remember)) {
				// 하루 보관
				rememberCookie = CookieUtils.createCookie("ID_REMEMBER", user.getUserId(),"/", 60*60*24);
				}else {
				//삭제 (maxage = 0)
				rememberCookie = CookieUtils.createCookie("ID_REMEMBER", "","/", 0);
				}
				resp.addCookie(rememberCookie);
				} catch (IOException e) {
			}
			return "event/eventHome";
		} catch (BizNotFoundException e) {
			error.reject("notfound","조회실패" + e.getMessage());
			return "login/login";
		} catch (BizPasswordNotMatchedException e) {
			error.reject("notfound","패스워드가 일치하지 않습니다.");
			return "login/login";
		}
	}
	
	@ResponseBody
	@RequestMapping("/event/mileagecheck")
	public Map<String, Object> eventMileageCheck(
			@RequestParam(name="memId", required=false) String memId
			,@RequestParam(name="requiredMileage", required=false) int requiredMileage){
			Map<String, Object> map = new HashMap<String, Object>();
			MemberVO member = memberService.getMember(memId);
			int mileage = member.getMemMileage();
			if(mileage>=requiredMileage) {
				map.put("result", true);
				map.put("curMileage",mileage);
				return map;
			}else {
				map.put("result", false);
				map.put("curMileage",mileage);
				map.put("msg", "마일리지가 부족합니다");
				return map;
			}
	}
	
	@ResponseBody
	@RequestMapping("/event/mileagecheckLt")
	public Map<String, Object> eventMileageCheckLt(
			@RequestParam(name="memId", required=false) String memId){
			Map<String, Object> map = new HashMap<String, Object>();
			MemberVO member = memberService.getMember(memId);
			int mileage = member.getMemMileage();
			if(mileage<10000) {
				map.put("result", true);
				map.put("curMileage",mileage);
				return map;
			}else {
				map.put("result", false);
				map.put("curMileage",mileage);
				map.put("msg", "마일리지가 충분하시네요~");
				return map;
			}
	}
	
	@ResponseBody
	@RequestMapping("/event/mileage")
	public List<MemberVO> eventMileage(
			@RequestParam(name="memId", required=false) String memId
			,@RequestParam(name="memMileage", required=false) int memMileage
			) throws Exception {
			MemberVO member = memberService.getMember(memId);
			member.setMemMileage(memMileage);
			memberService.changeMileage(member);
			List<MemberVO> memberList = memberService.getMemberMileageCheck();
			return memberList;
	}
	@ResponseBody
	@RequestMapping("/reservation/flightInfo")
	public Map<String, Object> flightInfo(
			@RequestParam(name="departure", required=false) String departure
			,@RequestParam(name="arrival", required=false) String arrival){
			String depAir = flightService.getCode(departure);
			String arrAir = flightService.getCode(arrival);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("depAir", depAir);
			map.put("arrAir",arrAir);
			return map;
	}
	@ResponseBody
	@RequestMapping("/reservation/airportInfo")
	public Map<String, Object> airportInfo(){
		Map<String, Object> map = new HashMap<String, Object>();
		List<String> list1 = new ArrayList<String>();
		List<String> list2 = new ArrayList<String>();
		list1= flightService.getkName();
		list2= flightService.geteName();
		map.put("list1", list1);
		map.put("list2",list2);
			return map;
	}
	
	
	
	@RequestMapping("/reservation/flightWeb")
	public String flightWeb(Model model
			,FlightVO flight) {
		String depAir = flight.getDepAir();
		String arrAir = flight.getArrAir();
		String start = flight.getStart(); 
		String end = flight.getEnd();
		model.addAttribute("depAir", depAir);
		model.addAttribute("arrAir", arrAir);
		model.addAttribute("start", start);
		model.addAttribute("end", end);
		return "reservation/flightWeb";
	}
	
	
	
	@RequestMapping("/event/ladder")
	public String ladder() {
		return "event/ladder";
	}
	@RequestMapping("/event/ladder2")
	public String ladder2() {
		return "event/ladder2";
	}
	@RequestMapping("/event/roulette")
	public String roulette(Model model,HttpSession session) {
		UserVO user = (UserVO)session.getAttribute("USER_INFO");
		MemberVO member = memberService.getMember(user.getUserId());
		model.addAttribute("member", member);
		return "event/roulette";
	}
	@RequestMapping("/event/roulette2")
	public String roulette2(Model model,HttpSession session) {
		UserVO user = (UserVO)session.getAttribute("USER_INFO");
		MemberVO member = memberService.getMember(user.getUserId());
		List<MemberVO> memberList = memberService.getMemberMileageCheck();
		model.addAttribute("memberList", memberList);
		model.addAttribute("member", member);
		return "event/roulette2";
	}
	@RequestMapping("/etc/sidebarChat")
	public String chat( ){
		return "etc/sidebarChat";	
		}
	}

