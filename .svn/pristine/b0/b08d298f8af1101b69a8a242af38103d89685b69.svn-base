package com.kongkong.main;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.kongkong.flight.service.IFlightService;
import com.kongkong.flight.vo.FlightVO;
import com.kongkong.login.vo.UserVO;

public class ChattingHandler extends TextWebSocketHandler{
	private List<WebSocketSession> sessionList = new ArrayList<WebSocketSession>();
	private static Logger logger = LoggerFactory.getLogger(ChattingHandler.class);
	@Autowired
	private IFlightService service;
	// 클라이언트가 연결 되었을 때 실행
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		sessionList.add(session);
		logger.info("{} 님이 연결됨", session.getId());
		UserVO user = (UserVO)session.getAttributes().get("USER_INFO");
		for(WebSocketSession sess : sessionList){
		if(user != null) {
			sess.sendMessage(new TextMessage(user.getUserName()+"님이 입장하셨습니다"));
		}else {
			sess.sendMessage(new TextMessage(session.getId()+"님이 입장하셨습니다"));
		}
		}
	}
	@Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        UserVO user = (UserVO)session.getAttributes().get("USER_INFO");
		logger.info("{}로 부터 {} 받음", session.getId(), message.getPayload());
        //모든 유저에게 메세지 출력
        logger.info(":"+ message.getPayload());
        for(WebSocketSession sess : sessionList){
            sess.sendMessage(new TextMessage(user.getUserName()+": "+message.getPayload()));
        }
        String saving = user.getUserName()+": "+message.getPayload();
        service.saveChat(saving);
	}
    //클라이언트 연결을 끊었을 때 실행
    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        sessionList.remove(session);
        logger.info("{} 연결 끊김.", session.getId());
    }
}
